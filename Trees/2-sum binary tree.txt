Given a binary search tree T, where each node contains a positive integer, and an integer K, you have to find whether or not there exist two different nodes A and B such that A.value + B.value = K.

Return 1 to denote that two such nodes exist. Return 0, otherwise.


void helper(TreeNode* A,vector<int>&B)
{
    if(A->left)
    helper(A->left,B);
    B.push_back(A->val);
    if(A->right)
    helper(A->right,B);
}
 
int Solution::t2Sum(TreeNode* A, int B) {
    vector<int>inorder;
    helper(A,inorder);
    int n=inorder.size();
    for(int i=0,j=n-1;i<j;)
    {
        if(inorder[i]+inorder[j] ==B)
        {
            return 1;
        }
        else if(inorder[i]+inorder[j]<B)
        {
            i++;
        }
        else if(inorder[i]+inorder[j] >B)
        {
            j--;
        }
    }
    return 0;
}
