Implement the next permutation, which rearranges numbers into the numerically next greater permutation of numbers for a given array A of size N.

If such arrangement is not possible, it must be rearranged as the lowest possible order i.e., sorted in an ascending order.
Input Format:

The first and the only argument of input has an array of integers, A.

Output Format:

Return an array of integers, representing the next permutation of the given array.



void swap(int &a, int &b){
    int temp = a;
    a = b;
    b = temp;
}

void swapWith(int num, vector<int>& A, int i){
    int min = A[i];
    int j = i, index = i;
    for(j = i; j < A.size(); j++){
        if(min > A[j] && A[j] > A[num]){
            index = j;
            min = A[j];
        }
    }
    swap(A[index], A[num]);
}


vector<int> Solution::nextPermutation(vector<int> &A) {
    int flag=0;
    for(int i = A.size()-1; i > 0; i--){
        if(A[i] > A[i-1]){
            swapWith(i-1, A, i);
            sort(A.begin()+i, A.end());
            flag = 1;
            break;
        }
    }
    
    if(flag == 0){
        sort(A.begin(), A.end());
    }
    return A;
}
