Given an 2D integer array A of size N x 2 denoting time intervals of different meetings.

Where:
A[i][0] = start time of the ith meeting.
A[i][1] = end time of the ith meeting.

Find the minimum number of conference rooms required so that all meetings can be done.


bool comp(vector A, vector B){
return A[0]<B[0];
}

int Solution::solve(vector<vector > &A) {
sort(A.begin(),A.end(),comp);
int ans=1;
priority_queue <int, vector, greater > pq;
pq.push(A[0][1]);
for(int i=1;i<A.size();i++){
if(A[i][0]>=pq.top()){pq.pop();}
else{ans++;}
pq.push(A[i][1]);
}
return ans;
}