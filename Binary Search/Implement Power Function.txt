

Implement pow(x, n) % d.

In other words, given x, n and d,

find (xn % d)

Note that remainders on division cannot be negative.
In other words, make sure the answer you return is non negative.

Input : x = 2, n = 3, d = 3
Output : 2

2^3 % 3 = 8 % 3 = 2.




int Solution::pow(int a, int b, int d) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details

   long long x = a;
long long pro = 1;
while(b > 0)
{
if(b&1)
{
pro = ((pro%d) * (x%d))%d;
}

    x = ((x)*(x))%d;
    b >>= 1;
}
if(pro < 0)
{
    return (pro%d + d)%d;
}
else
return pro%d;

}